{"version":3,"sources":["webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/windows.event.broker.ts","webpack:///./src/environments/environment.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 136\n// module chunks = 1","module.exports = \"<button class=\\\"btn btn-primary\\\" (click)=\\\"getGraphDataFromServer()\\\">Refresh Graph</button>\\n<!--<div style=\\\"width:80%; height:80%\\\">-->\\n<div >\\n  <!--This is line graph tag. It reads dataset from app.component.ts - lineChartData and other information... -->\\n  <canvas baseChart [datasets]=\\\"lineChartData\\\" [labels]=\\\"lineChartLabels\\\" [options]=\\\"lineChartOptions\\\" [legend]=\\\"lineChartLegend\\\"\\n    [chartType]=\\\"lineChartType\\\"></canvas>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 140\n// module chunks = 1","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 71;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 71\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, ViewChild } from '@angular/core';\r\nimport { ChartsModule, Color, BaseChartDirective } from 'ng2-charts';\r\nimport { Http } from \"@angular/http\";\r\n\r\n@Component({\r\n  // This is component id. In HTML if you put app-root, it's respective .html file content will render in browser\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  @ViewChild(BaseChartDirective) private _chart;\r\n\r\n  //Graph data structure.\r\n  public lineChartData: Array<any>;\r\n\r\n  //X Axis Chart labels - Reported_Time in our demo case\r\n  public lineChartLabels: Array<any>;\r\n\r\n  //Is graph responsive or fixed option\r\n  public lineChartOptions: any = {\r\n    responsive: true\r\n  };\r\n\r\n  //Legend flag\r\n  public lineChartLegend: boolean = true;\r\n\r\n  //Chart type.\r\n  public lineChartType: string = 'line';\r\n\r\n  public allGraphData = [];\r\n\r\n  constructor(private http: Http) {\r\n  }\r\n\r\n  //This function is executed before data binding happens between html and .ts file. Similar to Form_Load event in Win forms.\r\n  ngOnInit() {\r\n\r\n    //Initializing graph data structure.\r\n    this.lineChartData = new Array<any>();\r\n    this.lineChartData[0] = {};\r\n    this.lineChartData[0].data = new Array<any>();\r\n    this.lineChartData[0].label = \"PA\";\r\n    this.lineChartLabels = new Array<any>();\r\n\r\n    this.xAxisDataCount = 0;\r\n    this.yAxisDataCount = 0;\r\n\r\n    this.getGraphDataFromServer();\r\n    // setInterval(() => { this.getGraphDataFromServer(); }, 1000);\r\n    // this.getGraphDataFromServer();\r\n  }\r\n\r\n  xAxisDataCount: number;\r\n  yAxisDataCount: number;\r\n\r\n  getGraphDataFromServer() {\r\n    var url = \"http://grittytech.com:8080/report/report/\";\r\n    this.http.get(url).subscribe(response => {\r\n      var serverReponse = response.json();\r\n      // console.log('server response: ' + serverReponse.results);\r\n      this.allGraphData = JSON.parse(serverReponse.results);\r\n      // console.log('allGraphData: ' + JSON.stringify(this.allGraphData));\r\n\r\n      //allGraphData shall be populated from url http://grittytech.com:8080/report/report/, once its CORS error is fixed.\r\n\r\n      // Loop through allGraphData and populate line chart's graph data structure \r\n      for (var index = 0; index < this.allGraphData.length; index++) {\r\n        //Get current graph data\r\n        var data = this.allGraphData[index];\r\n\r\n        //Parse reported_time into Date object\r\n        var reportedTime = new Date(data.reported_time.toString());\r\n\r\n        //Bind X axis values to reported_time with time string only\r\n        this.lineChartLabels[index] = reportedTime.toLocaleTimeString();\r\n\r\n        // Fill \"PA\" value into graph's data\r\n        this.lineChartData[0].data[index] = data.Pa;\r\n        // console.log('PA: ' + this.lineChartData[0].data[index]);\r\n        // console.log('Reported time: ' + this.lineChartLabels[index]);\r\n      }\r\n      this.xAxisDataCount += this.lineChartLabels.length;\r\n      this.yAxisDataCount += this.lineChartData[0].data.length;\r\n      console.log(\"all PA data: \" + this.lineChartData[0].data);\r\n      this._chart.chart.update();\r\n    },\r\n      err => console.log('error: ' + err));\r\n  }\r\n}\r\n\r\n\r\n// import { Component } from '@angular/core';\r\n// import { ChartsModule, Color } from 'ng2-charts';\r\n// import { Http } from \"@angular/http\";\r\n// import { WindowsEventBroker } from \"app/windows.event.broker\";\r\n\r\n// @Component({\r\n//   // This is component id. In HTML if you put app-root, it's respective .html file content will render in browser\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html',\r\n//   styleUrls: ['./app.component.css']\r\n// })\r\n// export class AppComponent {\r\n//   //Graph data structure.\r\n//   public lineChartData: Array<any>;\r\n\r\n//   //X Axis Chart labels - Reported_Time in our demo case\r\n//   public lineChartLabels: Array<any>;\r\n\r\n//   //Is graph responsive or fixed option\r\n//   public lineChartOptions: any = {\r\n//     responsive: true\r\n//   };\r\n\r\n//   //Legend flag\r\n//   public lineChartLegend: boolean = true;\r\n\r\n//   //Chart type.\r\n//   public lineChartType: string = 'line';\r\n\r\n//   constructor(private http: Http, private service: WindowsEventBroker) {\r\n//   }\r\n\r\n//   //This function is executed before data binding happens between html and .ts file. Similar to Form_Load event in Win forms.\r\n//   ngOnInit() {\r\n//     this.lineChartData = new Array<any>();\r\n//     this.lineChartData[0] = {};\r\n//     this.lineChartData[0].data = new Array<any>();\r\n//     this.lineChartData[0].label = \"\";\r\n//     this.lineChartLabels = new Array<any>();\r\n\r\n//     this.service.updateGraph.subscribe(graphData => {\r\n//       console.log(\"update graph event received..\" + JSON.stringify(graphData));\r\n\r\n//       //TODO: BC - Graph update is taking too much time. Need to try direct chart.js library or try calling some other methods of chart.js\r\n//       this.lineChartLabels = graphData.xAxisData;\r\n//       this.lineChartData[0].data = graphData.yAxisData;\r\n//       this.lineChartData[0].label = graphData.label;\r\n\r\n//     }, err => console.log('error:' + err));\r\n//   }\r\n\r\n// }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { ChartsModule } from \"ng2-charts\";\n\nimport { AppComponent } from './app.component';\nimport { WindowsEventBroker } from \"app/windows.event.broker\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    ChartsModule\n  ],\n  providers: [\n    WindowsEventBroker\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Injectable, EventEmitter } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class WindowsEventBroker {\r\n    public updateGraph: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor() {\r\n        console.log('WindowsEventBroker service initialized...');\r\n        window['eventBroker'] = this;\r\n        console.log(\"EventBroker Constructed\");\r\n    }\r\n\r\n    public publish(webInterfacePayload: any) {\r\n        console.log('Event received from windyno...');\r\n        console.log(webInterfacePayload);\r\n        this.updateGraph.emit(webInterfacePayload);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/windows.event.broker.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts"],"sourceRoot":""}